<resources>
    <string name="app_name">Passage Reader</string>
    <string name="button_passage_1">Passage 1</string>
    <string name="button_passage_2">Passage 2</string>
    <string name="button_passage_3">Passage 3</string>
    <string name="text_header">WELCOME</string>
    <string name="passage_text_1"><b>Objects and Classes</b>\n
Object-oriented programming is modeled on how, in the real world, objects are often made up of many kinds of smaller objects. This capability of combining objects, however, is only one very general aspect of object-oriented programming.\n Object-oriented programming provides several other concepts and features to make creating and using objects easier and more flexible, and the most important of these features is that of classes. \nA class is a template for multiple objects with similar features. Classes embody all the features of a particular set of objects. When you write a program in an object-oriented language, you don’t define actual objects. \nYou
define classes of objects. For example, you might have a Tree class that describes the features of all trees (has leaves and roots, grows, creates chlorophyll). \nThe Tree class serves as an abstract model for the concept of a tree—to reach out and grab, or interact with, or cut down a tree you have to have a concrete instance of that tree. Of course, once you have a tree class, you can create lots of different instances of that tree, and each different tree instance can have different features (short, tall, bushy, drops leaves in Autumn), while still behaving like and being immediately recognizable as a tree.\n An instance of a class is another word for an actual object. If classes are an abstract representation of an object, an instance is its concrete representation. So what, precisely, is the difference between an instance and an object? Nothing, really. Object is the more general term, but both instances and objects are the concrete representation of a class. In fact, the terms instance and object are often used interchangeably in OOP language. An instance of a tree and a tree object are both the same thing. In an example closer to the sort of things you might want to do in Java programming, you might create a class for the user interface element called a button. The Button class defines the features of a button (its label, its size, its appearance) and how it behaves (does it need a single click or a double click to activate it, does it change color when it’s clicked, what does it do when it’s activated?). Once you define the Button class, you can then easily create instances of that button—that is, button objects—that all take on the basic features of the button as defined by the class.
</string>
    <string name="passage_text_2">Alex is a programmer based in the UK, he loves to sing in his spare time.</string>
    <string name="passage_text_3">Money is not everything, but everything need money.\n In every that you do, make sure
    you get money.</string>
</resources>